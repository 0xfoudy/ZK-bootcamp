pragma solidity 0.8.20;
import "forge-std/Console.sol";

contract Week4 {

    struct G1Point {
        uint256 x1;
        uint256 y1;
    }

    struct G2Point {
        uint256 x1;
        uint256 x2;
        uint256 y1;
        uint256 y2;
    }

    /*
alfa1:  (10744596414106452074759370245733544594153395043370666422502510773307029471145,
     848677436511517736191562425154572367705380862894644942948681172815252343932)

beta2:  ((10191129150170504690859455063377241352678147020731325090942140630855943625622,
 12345624066896925082600651626583520268054356403303305150512393106955803260718),
 (16727484375212017249697795760885267597317766655549468217180521378213906474374,
  13790151551682513054696583104432356791070435696840691503641536676885931241944))

gamma2:  ((2725019753478801796453339367788033689375851816420509565303521482350756874229,
 7273165102799931111715871471550377909735733521218303035754523677688038059653),
  (2512659008974376214222774206987427162027254181373325676825515531566330959255,
   957874124722006818841961785324909313781880061366718538693995380805373202866))

delta2:  ((18936818173480011669507163011118288089468827259971823710084038754632518263340, 
18556147586753789634670778212244811446448229326945855846642767021074501673839), 
(18825831177813899069786213865729385895767511805925522466244528695074736584695, 
13775476761357503446238925910346030822904460488609979964814810757616608848118))

A1 (4503322228978077916651710446042370109107355802721800704639343137502100212473,
 15755600620544848102871225597907291547126923215509797882023933893086009631615)

B2 ((14502447760486387799059318541209757040844770937862468921929310682431317530875,
 2443430939986969712743682923434644543094899517010817087050769422599268135103),
  (11721331165636005533649329538372312212753336165656329339895621434122061690013,
   4704672529862198727079301732358554332963871698433558481208245291096060730807))

C1 (3353031288059533942658390886683067124040920775575537747144343083137631628272,
 19321533766552368860946552437480515441416830039777911637913418824951667761761)
*/

    G1Point public alfa1 = G1Point(10744596414106452074759370245733544594153395043370666422502510773307029471145,
    848677436511517736191562425154572367705380862894644942948681172815252343932);

    G2Point public beta2 = G2Point(10191129150170504690859455063377241352678147020731325090942140630855943625622,
    12345624066896925082600651626583520268054356403303305150512393106955803260718,
    16727484375212017249697795760885267597317766655549468217180521378213906474374,
    13790151551682513054696583104432356791070435696840691503641536676885931241944);

    G2Point public gamma2 = G2Point(2725019753478801796453339367788033689375851816420509565303521482350756874229,
    7273165102799931111715871471550377909735733521218303035754523677688038059653,
    2512659008974376214222774206987427162027254181373325676825515531566330959255,
    957874124722006818841961785324909313781880061366718538693995380805373202866);

    G2Point public delta2 = G2Point(18936818173480011669507163011118288089468827259971823710084038754632518263340,
    18556147586753789634670778212244811446448229326945855846642767021074501673839,
    18825831177813899069786213865729385895767511805925522466244528695074736584695,
    13775476761357503446238925910346030822904460488609979964814810757616608848118);


    G1Point public G1 = G1Point(1,2);

    function evaluate(G1Point memory A1, G2Point memory B1, G1Point memory C1, uint256 x1, uint256 x2, uint256 x3) public returns (bool) {
        // X1 = x1G1 + x2G1 + x3G1
        (bool ok, bytes memory x1G1) = address(7).staticcall(abi.encode(G1, x1));
        (uint256 x1G1_x , uint256 x1G1_y) = abi.decode(x1G1, (uint256, uint256));

        (bool okk, bytes memory x2G1) = address(7).staticcall(abi.encode(G1, x2));
        (uint256 x2G1_x , uint256 x2G1_y) = abi.decode(x2G1, (uint256, uint256));

        (bool okkk, bytes memory x3G1) = address(7).staticcall(abi.encode(G1, x3));
        (uint256 x3G1_x , uint256 x3G1_y) = abi.decode(x3G1, (uint256, uint256));

        (bool okkkk, bytes memory x1plusx2G1) = address(6).staticcall(abi.encode(x1G1_x, x1G1_y, x2G1_x, x2G1_y));
        (uint256 x1plusx2G1_x , uint256 x1plusx2G1_y) = abi.decode(x1plusx2G1, (uint256, uint256));
        
        (bool okkkkk, bytes memory X1Sum) = address(6).staticcall(abi.encode(x1plusx2G1_x, x1plusx2G1_y, x3G1_x, x3G1_y));
        (uint256 X1_x , uint256 X1_y) = abi.decode(X1Sum, (uint256, uint256));

        G1Point memory X1 = G1Point(X1_x, X1_y);

        // alfa1 * beta2 + X1 * gamma2 + C1 * delta2 = A1B2
        (bool success, bytes memory result) = address(8).staticcall(abi.encode(
        A1.x1, A1.y1, 
        B1.x2, B1.x1, B1.y2, B1.y1,
        alfa1.x1, alfa1.y1,
        beta2.x2, beta2.x1, beta2.y2, beta2.y1,
        X1.x1, X1.y1,
        gamma2.x2, gamma2.x1, gamma2.y2, gamma2.y1,
        C1.x1, C1.y1,
        delta2.x2, delta2.x1, delta2.y2, delta2.y1));

        if (success) return abi.decode(result, (bool));
        require(success, "failed to call pairing");
    }
}
 